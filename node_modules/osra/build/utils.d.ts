import type { StructuredCloneTransferableType, TransferableObject, ProxiedErrorType, ProxiedFunctionType, ProxiedMessagePortType, ProxiedPromiseType, StructuredCloneTransferableProxiableType } from './types';
export declare const isClonable: (value: any) => boolean;
export declare const isTransferable: (value: any) => boolean;
export declare const getTransferableObjects: (value: any) => TransferableObject[];
export type EnvCheck = {
    uuid: string;
    supportsPorts: boolean;
    jsonOnly: boolean;
};
export type Context = {
    envCheck: EnvCheck;
    addIncomingProxiedMessagePort: (portId: string) => MessagePort;
    addOutgoingProxiedMessagePort: (port: MessagePort) => string;
    finalizationRegistry: FinalizationRegistry<number>;
};
export declare const proxiedFunctionToFunction: <JsonOnly extends boolean>(proxiedFunction: ProxiedFunctionType<JsonOnly>, context: Context) => (...args: StructuredCloneTransferableType[]) => Promise<unknown>;
export declare const proxiedMessagePortToMessagePort: <JsonOnly extends boolean>(proxiedMessagePort: ProxiedMessagePortType<JsonOnly>, context: Context) => MessagePort;
export declare const proxiedErrorToError: (proxiedError: ProxiedErrorType, context: Context) => Error;
export declare const proxiedPromiseToPromise: <JsonOnly extends boolean>(proxiedPromise: ProxiedPromiseType<JsonOnly>, context: Context) => Promise<unknown>;
export declare const replaceIncomingProxiedTypes: (value: StructuredCloneTransferableType, context: Context) => StructuredCloneTransferableProxiableType;
export declare const errorToProxiedError: (error: Error, _: Context) => {
    __OSRA_PROXY__: boolean;
    type: string;
    message: string;
    stack: string | undefined;
};
export declare const messagePortToProxiedMessagePort: (port: MessagePort, context: Context) => {
    port: MessagePort;
    __OSRA_PROXY__: boolean;
    type: string;
} | {
    portId: string;
    __OSRA_PROXY__: boolean;
    type: string;
};
export declare const promiseToProxiedPromise: (promise: Promise<StructuredCloneTransferableType>, context: Context) => {
    __OSRA_PROXY__: boolean;
    type: string;
    port: any;
};
export declare const functionToProxiedFunction: (func: Function, context: Context) => {
    __OSRA_PROXY__: boolean;
    type: string;
    port: any;
};
export declare const replaceOutgoingProxiedTypes: <T extends StructuredCloneTransferableProxiableType>(value: T, context: Context) => any;
export declare const replaceRecursive: <T extends StructuredCloneTransferableProxiableType, T2 extends (value: any) => any>(value: T, shouldReplace: (value: Parameters<T2>[0]) => boolean, replaceFunction: T2) => any;
export declare const makeNumberAllocator: () => {
    alloc: () => number;
    free: (number: any) => void;
};
type NumberAllocator = ReturnType<typeof makeNumberAllocator>;
export declare const makeAllocator: <T>({ numberAllocator }: {
    numberAllocator: NumberAllocator;
}) => {
    alloc: (value: T) => number;
    get: (id: number) => T | undefined;
    free: (id: number) => void;
};
export {};
